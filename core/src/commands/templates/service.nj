import { AppError, ResponseUtils } from "core/helpers";
import { {{pascalCase name}} } from "app/database";
import type { SchemaType } from "app/validations/{{pascalCase (pluralize name)}}/Create";

export class {{pascalCase name}}Service {
  static async List(page = 1, filter = "") {
    const filterDecoded = decodeURIComponent(filter);

    const perPage = 10;
    const skip = (page - 1) * perPage;
    const totalData = await {{pascalCase name}}.count();

    const query = await {{pascalCase name}}.findMany({
      where: {
        // OR: [
        //   {
        //     first: { contains: filterDecoded, mode: "insensitive" },
        //   },
        //   {
        //     second: { contains: filterDecoded, mode: "insensitive" },
        //   },
        // ],
      },
      take: perPage,
      skip,
    });

    const data = ResponseUtils.excludeFromList(query, ["createdAt", "updatedAt"]);

    const response = ResponseUtils.paginate({
      data,
      totalData,
      page,
      perPage,
    });

    return response;
  }

  static async Show(id: string) {
    const query = await {{pascalCase name}}.findFirst({ where: { id } });

    if (!query) throw AppError.E_NOT_FOUND();

    const result = ResponseUtils.exclude(query, [
      "createdAt",
      "updatedAt",
    ]);

    return result;
  }

  static async Create(data: SchemaType) {
    const query = await {{pascalCase name}}.create({ data });

    if (!query) throw AppError.E_GENERIC_ERROR("Error trying to save data.");

    const result = ResponseUtils.exclude(query, [
      "createdAt",
      "updatedAt",
    ]);

    return result;
  }

  static async Update(id: string, data: SchemaType) {
    await {{pascalCase name}}Service.Show(id);

    const result = await {{pascalCase name}}.update({ where: { id }, data });

    if (!result) throw AppError.E_GENERIC_ERROR("Error trying to save data.");

    return result;
  }

  static async Delete(id: string) {
    await {{pascalCase name}}Service.Show(id);

    const query = await {{pascalCase name}}.delete({
      where: { id },
    });

    if (!query) throw AppError.E_GENERIC_ERROR("Error trying to delete data.");

    return true;
  }
}
