import type { Request, Response } from "core";
import { ApiResponse } from "core/helpers";
import { {{pascalCase name}}Service } from "app/services/{{pascalCase name}}";
import {{pascalCase (pluralize name)}}Validator from "app/validations/{{pascalCase (pluralize name)}}";

export default class {{pascalCase name}}Controller {
  static async index(request: Request, response: Response) {
    const { page } = request.query;
    const data = await {{pascalCase name}}Service.List(Number(page));

    return response.render("{{name}}/list", { title: "List {{pascalCase name}}", data });
  }

  static async show(request: Request, response: Response) {
    try {
      const { id } = request.params;
      const data = await {{pascalCase name}}Service.Show(id);

      return response.render("{{name}}/show", { data });
    } catch (error: any) {
      return ApiResponse.error(response, error);
    }
  }

  static async create(request: Request, response: Response) {
    return response.render("{{name}}/create", { title: "Create {{pascalCase name}}" });
  }

  static async store(request: Request, response: Response) {
    try {
      await {{pascalCase (pluralize name)}}Validator.Create(request.body);
      const data = await {{pascalCase name}}Service.Create(request.body);

      return ApiResponse.success(response, data, "/redirectRoute");
    } catch (error: any) {
      return ApiResponse.error(response, error);
    }
  }

  static async edit(request: Request, response: Response) {
    try {
      const { id } = request.params;
      const { name, email } = await {{pascalCase name}}Service.Show(id);

      return response.render("{{name}}/edit", { id, name, email });
    } catch (error: any) {
      return ApiResponse.error(response, error);
    }
  }

  static async update(request: Request, response: Response) {
    try {
      await {{pascalCase (pluralize name)}}Validator.Update(request.body);
      const { id } = request.params;
      const { name, email } = request.body;
      const data = await {{pascalCase name}}Service.Update(id, { name, email });

      return ApiResponse.success(response, data, "/redirectRoute");
    } catch (error: any) {
      return ApiResponse.error(response, error);
    }
  }

  static async destroy(request: Request, response: Response) {
    try {
      const { id } = request.params;
      const data = await {{pascalCase name}}Service.Delete(id);

      return ApiResponse.success(response, data, "/redirectRoute");
    } catch (error: any) {
      return ApiResponse.error(response, error);
    }
  }
}
